{
  "typescript": {
    "imports": {
      "rules": [
        {
          "name": "Default Imports",
          "pattern": "import\\s+\\w+\\s+from\\s+['\"]([^'\"]+)['\"]",
          "description": "Default imports should be used for main class exports"
        },
        {
          "name": "Named Imports",
          "pattern": "import\\s+{[^}]+}\\s+from\\s+['\"]([^'\"]+)['\"]",
          "description": "Named imports should be used for types, interfaces and utility functions"
        },
        {
          "name": "Type Imports",
          "pattern": "import\\s+type\\s+{[^}]+}\\s+from\\s+['\"]([^'\"]+)['\"]",
          "description": "Type imports should be used for pure type definitions"
        },
        {
          "name": "Namespace Imports",
          "pattern": "import\\s+\\*\\s+as\\s+\\w+\\s+from\\s+['\"]([^'\"]+)['\"]",
          "description": "Namespace imports should be used for Node.js built-in modules"
        }
      ]
    },
    "exports": {
      "rules": [
        {
          "name": "Default Exports",
          "pattern": "export\\s+default\\s+class\\s+\\w+",
          "description": "Default exports should be used for main classes"
        },
        {
          "name": "Named Exports",
          "pattern": "export\\s+(interface|type|class|const|function)\\s+\\w+",
          "description": "Named exports should be used for types, interfaces and utility functions"
        }
      ]
    },
    "fileStructure": {
      "rules": [
        {
          "name": "Import Order",
          "pattern": "^(import\\s+.*\\n)+",
          "description": "Imports should be grouped in the following order:\n1. Node.js built-in modules\n2. External dependencies\n3. Internal modules"
        },
        {
          "name": "Export Order",
          "pattern": "^(export\\s+.*\\n)+",
          "description": "Exports should be grouped in the following order:\n1. Types and interfaces\n2. Constants\n3. Functions\n4. Classes"
        }
      ]
    },
    "naming": {
      "rules": [
        {
          "name": "Interface Names",
          "pattern": "^interface\\s+[A-Z]\\w+",
          "description": "Interface names should start with a capital letter"
        },
        {
          "name": "Type Names",
          "pattern": "^type\\s+[A-Z]\\w+",
          "description": "Type names should start with a capital letter"
        },
        {
          "name": "Class Names",
          "pattern": "^class\\s+[A-Z]\\w+",
          "description": "Class names should start with a capital letter"
        }
      ]
    }
  },
  "react": {
    "imports": {
      "rules": [
        {
          "name": "React Core Imports",
          "pattern": "import\\s+React(?:,\\s*{[^}]+})?\\s+from\\s+['\"]react['\"]",
          "description": "React core imports should be first"
        },
        {
          "name": "React Hook Imports",
          "pattern": "import\\s+{[^}]*use[A-Z]\\w+[^}]*}\\s+from\\s+['\"]react['\"]",
          "description": "React hooks should be imported from 'react'"
        },
        {
          "name": "Component Imports",
          "pattern": "import\\s+\\w+\\s+from\\s+['\"][./]+[^'\"]+['\"]",
          "description": "Component imports should use relative paths"
        },
        {
          "name": "CSS Imports",
          "pattern": "import\\s+['\"][./]+[^'\"]+\\.css['\"]",
          "description": "CSS imports should be after component imports"
        }
      ]
    },
    "componentStructure": {
      "rules": [
        {
          "name": "Component Declaration",
          "pattern": "^(const|function)\\s+[A-Z]\\w+\\s*=\\s*(?:async\\s*)?\\([^)]*\\)\\s*=>",
          "description": "Components should be declared using arrow functions or function declarations"
        },
        {
          "name": "Props Interface",
          "pattern": "interface\\s+[A-Z]\\w+Props\\s*{[^}]*}",
          "description": "Props interfaces should be named with 'Props' suffix"
        },
        {
          "name": "State Declaration",
          "pattern": "const\\s+\\[[^,]+,\\s*set[A-Z]\\w+\\]\\s*=\\s*useState",
          "description": "State variables should use useState hook"
        },
        {
          "name": "Effect Declaration",
          "pattern": "useEffect\\(\\s*\\(\\)\\s*=>\\s*{[^}]*},\\s*\\[[^\\]]*\\]\\s*\\)",
          "description": "Effects should be declared using useEffect hook"
        }
      ]
    },
    "fileStructure": {
      "rules": [
        {
          "name": "Import Order",
          "pattern": "^(import\\s+.*\\n)+",
          "description": "Imports should be ordered: React, external libraries, components, styles"
        },
        {
          "name": "Component Structure",
          "pattern": "^(import.*\\n)+\\n(?:interface.*\\n)*\\n(?:const|function).*\\n",
          "description": "File structure should be: imports, interfaces, component"
        }
      ]
    },
    "naming": {
      "rules": [
        {
          "name": "Component Names",
          "pattern": "^[A-Z][a-zA-Z0-9]*$",
          "description": "Component names should be PascalCase"
        },
        {
          "name": "Hook Names",
          "pattern": "^use[A-Z][a-zA-Z0-9]*$",
          "description": "Custom hook names should start with 'use'"
        },
        {
          "name": "Event Handler Names",
          "pattern": "^handle[A-Z][a-zA-Z0-9]*$",
          "description": "Event handler functions should start with 'handle'"
        }
      ]
    },
    "styling": {
      "rules": [
        {
          "name": "CSS Module Imports",
          "pattern": "import\\s+styles\\s+from\\s+['\"][./]+[^'\"]+\\.module\\.css['\"]",
          "description": "CSS modules should be imported as 'styles'"
        },
        {
          "name": "Inline Styles",
          "pattern": "style=\\{\\{[^}]*\\}\\}",
          "description": "Inline styles should use camelCase properties"
        }
      ]
    }
  },
  "general": {
    "codeQuality": {
      "rules": [
        {
          "name": "File Length",
          "pattern": "^.{0,300}$",
          "description": "Files should not exceed 200-300 lines of code"
        },
        {
          "name": "Code Duplication",
          "pattern": ".*",
          "description": "Avoid code duplication by reusing existing functionality"
        },
        {
          "name": "Environment Awareness",
          "pattern": ".*",
          "description": "Code should handle different environments (dev, test, prod) appropriately"
        },
        {
          "name": "Mock Data",
          "pattern": ".*",
          "description": "Mock data should only be used in tests, never in dev or prod"
        },
        {
          "name": "Fake Data",
          "pattern": ".*",
          "description": "Never add stubbing or fake data patterns to code that affects dev or prod environments"
        }
      ]
    },
    "codeOrganization": {
      "rules": [
        {
          "name": "Clean Code",
          "pattern": ".*",
          "description": "Keep the codebase clean and organized"
        },
        {
          "name": "Script Files",
          "pattern": ".*",
          "description": "Avoid writing scripts in files if they are likely to be run only once"
        },
        {
          "name": "Environment Files",
          "pattern": ".*",
          "description": "Never overwrite .env files without explicit confirmation"
        }
      ]
    },
    "changeManagement": {
      "rules": [
        {
          "name": "Focused Changes",
          "pattern": ".*",
          "description": "Only make changes that are requested or well understood and related to the current task"
        },
        {
          "name": "Pattern Changes",
          "pattern": ".*",
          "description": "When fixing issues, exhaust all options with existing implementation before introducing new patterns"
        },
        {
          "name": "Cleanup",
          "pattern": ".*",
          "description": "Remove old implementations when introducing new patterns to avoid duplicate logic"
        }
      ]
    }
  }
} 